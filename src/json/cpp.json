[
   {
      "heading": "C++ Introduction",
      "content": []
   },
   {
      "heading": "What is C++?",
      "content": [
         {
            "value": "C++ is a cross-platform language that can be used to create high-performance applications."
         },
         {
            "value": "C++ was developed by Bjarne Stroustrup, as an extension to the C language."
         },
         {
            "value": "C++ gives programmers a high level of control over system resources and memory."
         },
         {
            "value": "The language was updated 4 major times in 2011, 2014, 2017, and 2020 to C++11, C++14, C++17, C++20."
         }
      ]
   },
   {
      "heading": "Why Use C++",
      "content": [
         {
            "value": "C++ is one of the world's most popular programming languages."
         },
         {
            "value": "C++ can be found in today's operating systems, Graphical User Interfaces, and embedded systems."
         },
         {
            "value": "C++ is an object-oriented programming language which gives a clear structure to programs and allows code to be reused, lowering development costs."
         },
         {
            "value": "C++ is portable and can be used to develop applications that can be adapted to multiple platforms."
         },
         {
            "value": "C++ is fun and easy to learn!"
         },
         {
            "value": "As C++ is close to C, C# and Java, it makes it easy for programmers to switch to C++ or vice versa."
         }
      ]
   },
   {
      "heading": "Difference between C and C++",
      "content": [
         {
            "value": "C++ was developed as an extension of C, and both languages have almost the same syntax."
         },
         {
            "value": "The main difference between C and C++ is that C++ support classes and objects, while C does not."
         }
      ]
   },

   {
      "heading": "C++ Syntax",
      "content": [
         {
            "value": "Let's break up the following code to understand it better:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img1.png"
         },
         {
            "value": "Example explained"
         },
         {
            "value": "Line 1: #include <iostream> is a header file library that lets us work with input and output objects, such as cout (used in line 5). Header files add functionality to C++ programs."
         },
         {
            "value": "Line 2: using namespace std means that we can use names for objects and variables from the standard library."
         },
         {
            "value": "Line 3: A blank line. C++ ignores white space. But we use it to make the code more readable."
         },
         {
            "value": "Line 4: Another thing that always appear in a C++ program, is int main(). This is called a function. Any code inside its curly brackets {} will be executed."
         },
         {
            "value": "Line 5: cout (pronounced \"see-out\") is an object used together with the insertion operator (<<) to output/print text. In our example it will output \"Hello World\"."
         },
         {
            "value": "Note: Every C++ statement ends with a semicolon ;."
         },
         {
            "value": "The body of int main() could also been written as:"
         },
         {
            "value": "int main () { cout << \"Hello World! \"; return 0; }"
         },
         {
            "value": "Remember: The compiler ignores white spaces. However, multiple lines makes the code more readable."
         },
         {
            "value": "Line 6: return 0 ends the main function."
         },
         {
            "value": "Line 7: Do not forget to add the closing curly bracket } to actually end the main function."
         }
      ]
   },
   {
      "heading": "Omitting Namespace",
      "content": [
         {
            "value": "You might see some C++ programs that runs without the standard namespace library. The using namespace std line can be omitted and replaced with the std keyword, followed by the :: operator for some objects:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img2.png"
         }
      ]
   },

   {
      "heading": "C++ Output",
      "content": [
         {
            "value": "The cout object, together with the << operator, is used to output values/print text:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img3.png"
         },
         {
            "value": "You can add as many cout objects as you want. However, note that it does not insert a new line at the end of the output:"
         },
         {
            "image": "photos/cpp/img4.png"
         }
      ]
   },
   {
      "heading": "New Lines",
      "content": [
         {
            "value": "To insert a new line, you can use the \\n character:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img5.png"
         },
         {
            "value": "Another way to insert a new line, is with the endl manipulator:"
         },
         {
            "image": "photos/cpp/img6.png"
         }
      ]
   },

   {
      "heading": "C++ Comments",
      "content": [
         {
            "value": "Comments can be used to explain C++ code, and to make it more readable. It can also be used to prevent execution when testing alternative code. Comments can be singled-lined or multi-lined."
         }
      ]
   },
   {
      "heading": "Single-line Comments",
      "content": [
         {
            "value": "Single-line comments start with two forward slashes (//)."
         },
         {
            "value": "Any text between // and the end of the line is ignored by the compiler (will not be executed)."
         },
         {
            "value": "This example uses a single-line comment before a line of code:"
         },
         {
            "image": "photos/cpp/img7.png"
         }
      ]
   },
   {
      "heading": "C++ Multi-line Comments",
      "content": [
         {
            "value": "Multi-line comments start with /* and ends with */."
         },
         {
            "value": "Any text between /* and */ will be ignored by the compiler:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img8.png"
         }
      ]
   },

   {
      "heading": "C++ Variables",
      "content": [
         {
            "value": "Variables are containers for storing data values."
         },
         {
            "value": "In C++, there are different types of variables (defined with different keywords), for example:"
         },
         {
            "value": "int - stores integers (whole numbers), without decimals, such as 123 or -123"
         },
         {
            "value": "double - stores floating point numbers, with decimals, such as 19.99 or -19.99"
         },
         {
            "value": "char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes"
         },
         {
            "value": "string - stores text, such as \"Hello World\". String values are surrounded by double quotes"
         },
         {
            "value": "bool - stores values with two states: true or false"
         }
      ]
   },
   {
      "heading": "Declaring (Creating) Variables",
      "content": [
         {
            "value": "To create a variable, specify the type and assign it a value:"
         },
         {
            "image": "photos/cpp/img9.png"
         },
         {
            "value": "Where type is one of C++ types (such as int), and variableName is the name of the variable (such as x or myName). The equal sign is used to assign values to the variable."
         },
         {
            "value": "To create a variable that should store a number, look at the following example:"
         },
         {
            "value": "Example"
         },
         {
            "value": "Create a variable called myNum of type int and assign it the value 15:"
         },
         {
            "image": "photos/cpp/img10.png"
         },
         {
            "value": "You can also declare a variable without assigning the value, and assign the value later:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img11.png"
         },
         {
            "value": "Note that if you assign a new value to an existing variable, it will overwrite the previous value:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img12.png"
         }
      ]
   },
   {
      "heading": "Other Types",
      "content": [
         {
            "value": "A demonstration of other data types:"
         },
         {
            "image": "photos/cpp/img13.png"
         }
      ]
   },
   {
      "heading": "Display Variables",
      "content": [
         {
            "value": "The cout object is used together with the << operator to display variables."
         },
         {
            "value": "To combine both text and a variable, separate them with the << operator:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img14.png"
         }
      ]
   },
   {
      "heading": "Add Variables Together",
      "content": [
         {
            "value": "To add a variable to another variable, you can use the + operator:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img15.png"
         }
      ]
   },
   {
      "heading": "C++ Declare Multiple Variables",
      "content": [
         {
            "value": "To declare more than one variable of the same type, use a comma-separated list:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img16.png"
         }
      ]
   },

   {
      "heading": "C++ Identifiers",
      "content": [
         {
            "value": "All C++ variables must be identified with unique names."
         },
         {
            "value": "These unique names are called identifiers."
         },
         {
            "value": "Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume)."
         },
         {
            "value": "Note: It is recommended to use descriptive names in order to create understandable and maintainable code:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img17.png"
         },
         {
            "value": "The general rules for naming variables are:"
         },
         {
            "value": "Names can contain letters, digits and underscores"
         },
         {
            "value": "Names must begin with a letter or an underscore (_)"
         },
         {
            "value": "Names are case sensitive (myVar and myvar are different variables)"
         },
         {
            "value": "Names cannot contain whitespaces or special characters like !, #, %, etc."
         },
         {
            "value": "Reserved words (like C++ keywords, such as int) cannot be used as names"
         }
      ]
   },

   {
      "heading": "C++ Constants",
      "content": [
         {
            "value": "When you do not want others (or yourself) to override existing variable values, use the const keyword (this will declare the variable as \"constant\", which means unchangeable and read-only):"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img18.png"
         },
         {
            "value": "You should always declare the variable as constant when you have values that are unlikely to change:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img19.png"
         }
      ]
   },

   {
      "heading": "C++ User Input",
      "content": [
         {
            "value": "You have already learned that cout is used to output (print) values. Now we will use cin to get user input."
         },
         {
            "value": "cin is a predefined variable that reads data from the keyboard with the extraction operator (>>)."
         },
         {
            "value": "In the following example, the user can input a number, which is stored in the variable x. Then we print the value of x:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img20.png"
         }
      ]
   },
   {
      "heading": "Creating a Simple Calculator",
      "content": [
         {
            "value": "In this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img21.png"
         }
      ]
   },

   {
      "heading": "C++ Data Types",
      "content": [
         {
            "value": "As explained in the Variables chapter, a variable in C++ must be a specified data type:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img22.png"
         }
      ]
   },
   {
      "heading": "C++ Numeric Data Types",
      "content": [
         {
            "value": "Use int when you need to store a whole number without decimals, like 35 or 1000, and float or double when you need a floating point number (with decimals), like 9.99 or 3.14515."
         },
         {
            "value": "int"
         },
         {
            "image": "photos/cpp/img23.png"
         },
         {
            "value": "float"
         },
         {
            "image": "photos/cpp/img24.png"
         },
         {
            "value": "double"
         },
         {
            "image": "photos/cpp/img25.png"
         }
      ]
   },
   {
      "heading": "C++ String Data Types",
      "content": [
         {
            "value": "The string type is used to store a sequence of characters (text). This is not a built-in type, but it behaves like one in its most basic usage. String values must be surrounded by double quotes:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img26.png"
         },
         {
            "value": "To use strings, you must include an additional header file in the source code, the <string> library:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img27.png"
         }
      ]
   },

   {
      "heading": "C++ Operators",
      "content": [
         {
            "value": "Operators are used to perform operations on variables and values."
         },
         {
            "value": "In the example below, we use the + operator to add together two values:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img28.png"
         },
         {
            "value": "Although the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:"
         },
         {
            "image": "photos/cpp/img29.png"
         }
      ]
   },

   {
      "heading": "C++ Strings",
      "content": [
         {
            "value": "Strings are used for storing text."
         },
         {
            "value": "A string variable contains a collection of characters surrounded by double quotes:"
         },
         {
            "value": "Example"
         },
         {
            "value": "Create a variable of type string and assign it a value:"
         },
         {
            "image": "photos/cpp/img30.png"
         },
         {
            "value": "To use strings, you must include an additional header file in the source code, the <string> library:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img31.png"
         }
      ]
   },
   {
      "heading": "String Concatenation",
      "content": [
         {
            "value": "The + operator can be used between strings to add them together to make a new string. This is called concatenation:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img32.png"
         },
         {
            "value": "In the example above, we added a space after firstName to create a space between John and Doe on output. However, you could also add a space with quotes (\" \" or ' '):"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img33.png"
         }
      ]
   },
   {
      "heading": "Append",
      "content": [
         {
            "value": "A string in C++ is actually an object, which contain functions that can perform certain operations on strings. For example, you can also concatenate strings with the append() function:"
         },
         {
            "image": "photos/cpp/img34.png"
         }
      ]
   },

   {
      "heading": "C++ Numbers and Strings"
   },
   {
      "heading": "Adding Numbers and Strings",
      "content": [
         {
            "value": "WARNING!"
         },
         {
            "value": "C++ uses the + operator for both addition and concatenation."
         },
         {
            "value": "Numbers are added. Strings are concatenated."
         },
         {
            "value": "If you add two numbers, the result will be a number:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img35.png"
         },
         {
            "value": "If you add two strings, the result will be a string concatenation:"
         },
         {
            "image": "photos/cpp/img36.png"
         },
         {
            "value": "If you try to add a number to a string, an error occurs:"
         },
         {
            "value": "Example"
         },
         {
            "image": "photos/cpp/img37.png"
         }
      ]
   }
]
